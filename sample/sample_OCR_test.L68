00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.13.01
Created On: 11/18/2013 9:26:38 PM

00000000                             1  
00000000                             2              OPT         CRE
00001000                             3              ORG         $1000
00001000                             4  START
00001000                             5  *************************** DEV TEST PURPOSES ONLY ****************************
00001000  49F9 00001080              6              LEA         INPUT,A4
00001006  4BF9 000013CC              7              LEA         END_INPUT,A5
0000100C                             8  NEXT
0000100C  6100 03BE                  9              BSR         OCR
00001010  6100 000A                 10              BSR         DISPLAY
00001014  B9CD                      11              CMPA.L      A5,A4
00001016  6FF4                      12              BLE         NEXT
00001018  4E72 2700                 13              STOP        #$2700
0000101C                            14  
0000101C                            15  DISPLAY
0000101C  45F9 00001074             16              LEA         validB,A2   ; load register for increment
00001022                            17  LOOP
00001022  3252                      18              MOVEA.W     (A2),A1     ; move reg addr value for display
00001024  34FC FFFF                 19              MOVE.W      #$FFFF,(A2)+
00001028  B2FC FFFF                 20              CMPA        #$FFFF,A1   ; check for end
0000102C  6700 000E                 21              BEQ         QUIT
00001030  6100 0004                 22              BSR         TO_CONSOLE
00001034  60EC                      23              BRA         LOOP
00001036                            24  TO_CONSOLE
00001036  700E                      25              MOVEQ       #14,D0      ; load trap task to display
00001038  4E4F                      26              TRAP        #15         ; display
0000103A  4E75                      27              RTS
0000103C                            28  QUIT
0000103C  4E75                      29              RTS
0000103E                            30  
0000103E                            31  EAR_decode
0000103E  48E7 C000                 32              MOVEM.L     D0/D1,-(SP)
00001042  0C01 0000                 33              CMPI.B      #0,D1
00001046  6700 0010                 34              BEQ         SRCE
0000104A  0C01 0001                 35              CMPI.B      #1,D1
0000104E  6700 000E                 36              BEQ         DEST
00001052                            37  EAR_DONE
00001052  4CDF 0003                 38              MOVEM.L     (SP)+,D0/D1
00001056  4E75                      39              RTS
00001058                            40  SRCE
00001058  3CFC 1064                 41              MOVE.W      #_SRCE,(A6)+        ; push address of ANDI to buffer
0000105C  60F4                      42              BRA         EAR_DONE
0000105E                            43  DEST
0000105E  3CFC 106C                 44              MOVE.W      #_DEST,(A6)+        ; push address of ANDI to buffer
00001062  60EE                      45              BRA         EAR_DONE
00001064                            46  
00001064= 20 3C 53 52 43 45 ...     47  _SRCE        DC.B        ' <SRCE>',0
0000106C= 2C 3C 44 45 53 54 ...     48  _DEST        DC.B        ',<DEST>',0
00001074                            49  
00001074                            50  validB      DS.W        6   ; buffer stores addresses of defined constants
00001080                            51  INPUT
00001080= 4E71 4400 4410 4...       52              DC.W        $4E71,$4400,$4410,$4418,$4420,$4439,$4439,$4440,$4450
00001092= 4458 4460 4479 4...       53              DC.w   $4458,$4460,$4479,$4479,$4480,$4490,$4498,$44A0,$44B9,$44B9
000010A6= 4ED0 4EF9 4EF9 4...       54              DC.w   $4ED0,$4EF9,$4EF9,$4E90,$4EB9,$4EB9,$4E75,$1200,$1280,$12C0
000010BA= 1300 13C0 13C0 3...       55              DC.w   $1300,$13C0,$13C0,$3200,$3280,$32C0,$3300,$33C0,$33C0,$2200
000010CE= 2280 22C0 2300 2...       56              DC.w   $2280,$22C0,$2300,$23C0,$23C0,$1200,$1210,$1218,$1220,$1039
000010E2= 1039 123C 3200 3...       57              DC.w   $1039,$123C,$3200,$3208,$3210,$3218,$3220,$3039,$3039,$323C
000010F6= 2200 2208 2210 2...       58              DC.w   $2200,$2208,$2210,$2218,$2220,$2039,$2039,$223C,$3240,$3248
0000110A= 3250 3258 3260 3...       59              DC.w   $3250,$3258,$3260,$3279,$3279,$327C,$2240,$2248,$2250,$2258
0000111E= 2260 2279 2279 2...       60              DC.w   $2260,$2279,$2279,$227C,$D2C0,$D2C8,$D2D0,$D2D8,$D2E0,$D2F9
00001132= D2F9 D2FC D3C0 D...       61              DC.w   $D2F9,$D2FC,$D3C0,$D3C8,$D3D0,$D3D8,$D3E0,$D3F9,$D3F9,$D3FC
00001146= 0601 0611 0619 0...       62              DC.w   $0601,$0611,$0619,$0621,$0639,$0639,$0641,$0651,$0659,$0661
0000115A= 0679 0679 0681 0...       63              DC.w   $0679,$0679,$0681,$0691,$0699,$06A1,$06B9,$06B9,$5001,$5011
0000116E= 5019 5021 5039 5...       64              DC.w   $5019,$5021,$5039,$5039,$5041,$5049,$5051,$5059,$5061,$5079
00001182= 5079 5081 5089 5...       65              DC.w   $5079,$5081,$5089,$5091,$5099,$50A1,$50B9,$50B9,$92C0,$92C8
00001196= 92D0 92D8 92E0 9...       66              DC.w   $92D0,$92D8,$92E0,$92F9,$92F9,$92FC,$93C0,$93C8,$93D0,$93D8
000011AA= 93E0 93F9 93F9 9...       67              DC.w   $93E0,$93F9,$93F9,$93FC,$0401,$0411,$0419,$0421,$0439,$0439
000011BE= 0441 0451 0459 0...       68              DC.w   $0441,$0451,$0459,$0461,$0479,$0479,$0481,$0491,$0499,$04A1
000011D2= 04B9 04B9 C200 C...       69              DC.w   $04B9,$04B9,$C200,$C210,$C218,$C220,$C239,$C239,$C23C,$C240
000011E6= C250 C258 C260 C...       70              DC.w   $C250,$C258,$C260,$C279,$C279,$C27C,$C280,$C290,$C298,$C2A0
000011FA= C2B9 C2B9 C2BC C...       71              DC.w   $C2B9,$C2B9,$C2BC,$C111,$C119,$C121,$C139,$C139,$C151,$C159
0000120E= C161 C179 C179 C...       72              DC.w   $C161,$C179,$C179,$C191,$C199,$C1A1,$C1B9,$C1B9,$0201,$0211
00001222= 0219 0221 0239 0...       73              DC.w   $0219,$0221,$0239,$0239,$0241,$0251,$0259,$0261,$0279,$0279
00001236= 0281 0291 0299 0...       74              DC.w   $0281,$0291,$0299,$02A1,$02B9,$02B9,$8200,$8210,$8218,$8220
0000124A= 8239 8239 823C 8...       75              DC.w   $8239,$8239,$823C,$8240,$8250,$8258,$8260,$8279,$8279,$827C
0000125E= 8280 8290 8298 8...       76              DC.w   $8280,$8290,$8298,$82A0,$82B9,$82B9,$82BC,$8111,$8119,$8121
00001272= 8139 8139 8151 8...       77              DC.w   $8139,$8139,$8151,$8159,$8161,$8179,$8179,$8191,$8199,$81A1
00001286= 81B9 81B9 0001 0...       78              DC.w   $81B9,$81B9,$0001,$0011,$0019,$0021,$0039,$0039,$0041,$0051
0000129A= 0059 0061 0079 0...       79              DC.w   $0059,$0061,$0079,$0079,$0081,$0091,$0099,$00A1,$00B9,$00B9
000012AE= B101 B111 B119 B...       80              DC.w   $B101,$B111,$B119,$B121,$B139,$B139,$B141,$B151,$B159,$B161
000012C2= B179 B179 B181 B...       81              DC.w   $B179,$B179,$B181,$B191,$B199,$B1A1,$B1B9,$B1B9,$0A01,$0A11
000012D6= 0A19 0A21 0A39 0...       82              DC.w   $0A19,$0A21,$0A39,$0A39,$0A41,$0A51,$0A59,$0A61,$0A79,$0A79
000012EA= 0A81 0A91 0A99 0...       83              DC.w   $0A81,$0A91,$0A99,$0AA1,$0AB9,$0AB9,$E121,$E161,$E341,$E1D1
000012FE= E1D9 E1E1 E1F9 E...       84              DC.w   $E1D9,$E1E1,$E1F9,$E1F9,$E1A1,$E021,$E061,$E241,$E0D1,$E0D9
00001312= E0E1 E0F9 E0F9 E...       85              DC.w   $E0E1,$E0F9,$E0F9,$E0A1,$E139,$E179,$E359,$E7D1,$E7D9,$E7E1
00001326= E7F9 E7F9 E1B9 E...       86              DC.w   $E7F9,$E7F9,$E1B9,$E039,$E079,$E259,$E6D1,$E6D9,$E6E1,$E6F9
0000133A= E6F9 E0B9 B200 B...       87              DC.w   $E6F9,$E0B9,$B200,$B210,$B218,$B220,$B239,$B239,$B23C,$B240
0000134E= B248 B250 B258 B...       88              DC.w   $B248,$B250,$B258,$B260,$B279,$B279,$B27C,$B280,$B288,$B290
00001362= B298 B2A0 B2B9 B...       89              DC.w   $B298,$B2A0,$B2B9,$B2B9,$B2BC,$B2C0,$B2C8,$B2D0,$B2D8,$B2E0
00001376= B2F9 B2F9 B2FC B...       90              DC.w   $B2F9,$B2F9,$B2FC,$B3C0,$B3C8,$B3D0,$B3D8,$B3E0,$B3F9,$B3F9
0000138A= B3FC 0C01 0C11 0...       91              DC.w   $B3FC,$0C01,$0C11,$0C19,$0C21,$0C39,$0C39,$0C41,$0C51,$0C59
0000139E= 0C61 0C79 0C79 0...       92              DC.w   $0C61,$0C79,$0C79,$0C81,$0C91,$0C99,$0CA1,$0CB9,$0CB9,$6400
000013B2= 6500 6700 6C00 6...       93              DC.w   $6500,$6700,$6C00,$6E00,$6200,$6F00,$6300,$6D00,$6B00,$6600
000013C6= 6A00 6800 6900            94              DC.w   $6A00,$6800,$6900
000013CC                            95  END_INPUT
000013CC                            96  *******************************************************************************
000013CC                            97  */////////////////////////////////////////////////////////////////////////////*
000013CC                            98  *                               Op-Code Routine                               *
000013CC                            99  *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*
000013CC                           100  *******************************************************************************
000013CC                           101  
000013CC                           102  * --Receive a pointer to the op-code word in memory, a pointer to the next
000013CC                           103  *   available space in the buffer, and a good/bad flag (bool bit) from the I/O
000013CC                           104  *   routine
000013CC                           105  * --The Word data at the specified address is moved to Data register
000013CC                           106  * --Move bits from the word to separate data registers for comparison, and/or
000013CC                           107  *   employ some form of bit masking, shifting, or rolling.
000013CC                           108  * --If Word cannot be decoded to a matching op-code, set some kind of bool
000013CC                           109  *   flag/bit and return to I/O
000013CC                           110  * --If Word can be decoded, then prepare ASCII string to return to I/O
000013CC                           111  * --Send 6 bits from the EA field of the op-code word, a pointer to the
000013CC                           112  *   next word after the op-code Word, and a good/bad flag (bool bit) to the
000013CC                           113  *   EA routine
000013CC                           114  * --Receive a pointer to the next word after the EA word, a pointer to next
000013CC                           115  *   available space in the buffer, and a good/bad flag (bool bit) from the EA
000013CC                           116  *   routine
000013CC                           117  * --Send a memory pointer to the next op-code word and a good/bad flag 
000013CC                           118  *   (bool bit) to I/O routine
000013CC                           119  
000013CC                           120  *******************************************************************************
000013CC                           121  
000013CC                           122  **Notes for routine**
000013CC                           123  * --Registers are arbitrary, but all register states except the register used
000013CC                           124  *   for the pointer to the op-code word (A0 for now) should be saved prior to 
000013CC                           125  *   op-code routine anyway
000013CC                           126  * --Universal buffer needs to be established
000013CC                           127  * --bool bit, still not sure which register to use
000013CC                           128  * --OCR = Op-code routine
000013CC                           129  * --JSR OCR is a temporary call, remove when I/O actual utilizes subroutine
000013CC                           130  
000013CC                           131  OCR ; subroutine called by I/O
000013CC  48E7 FFF6                132              MOVEM.L     A0-A3/A5-A6/D0-D7,-(SP)
000013D0  4DF8 1074                133              LEA         validB,A6  ; load good buffer to A6
000013D4  321C                     134              MOVE.W      (A4)+,D1   ; A4, universal ptr to next op-code mem addr
000013D6                           135                                     ; D1 holds original op-code word until
000013D6                           136                                     ; routine is finished
000013D6                           137  
000013D6  7003                     138              MOVEQ       #3,D0                   ; Iso-task 3: isolate d12-d15
000013D8  6100 03FA                139              BSR         ISO_BITS
000013DC                           140                                                  **Branches**
000013DC  B43C 0000                141              CMP.B       #0,D2
000013E0  6700 0060                142              BEQ         ORI_ANDI_SUBI_ADDI_EORI_CMPI ; ORI,ANDI,SUBI,EORI,CMPI
000013E4  B43C 0003                143              CMP.B       #3,D2
000013E8  6F00 0110                144              BLE         MOVE_MOVEA              ; MOVE, MOVEA
000013EC  B43C 0004                145              CMP.B       #4,D2
000013F0  6700 014E                146              BEQ         NEG_NOP_RTS_JSR_JMP     ; NEG, NOP, RTS, JSR, JMP
000013F4  B43C 0005                147              CMP.B       #5,D2
000013F8  6700 01DA                148              BEQ         ADDQ_                   ; ADDQ
000013FC  B43C 0006                149              CMP.B       #6,D2
00001400  6700 01E8                150              BEQ         B_                      ; Bcc
00001404  B43C 0008                151              CMP.B       #8,D2
00001408  6700 023A                152              BEQ         OR_                     ; OR
0000140C  B43C 0009                153              CMP.B       #9,D2
00001410  6700 024C                154              BEQ         SUBA_                   ; SUBA
00001414  B43C 000B                155              CMP.B       #11,D2
00001418  6700 025E                156              BEQ         EOR_CMP_CMPA            ; EOR, CMP, CMPA
0000141C  B43C 000C                157              CMP.B       #12,D2
00001420  6700 02C8                158              BEQ         AND_                    ; AND
00001424  B43C 000D                159              CMP.B       #13,D2
00001428  6700 02DA                160              BEQ         ADDA_                   ; ADDA
0000142C  B43C 000E                161              CMP.B       #14,D2
00001430  6700 02EC                162              BEQ         ASd_ROd                 ; ASd, ROd
00001434  6000 0396                163              BRA         DATA                    ; value not recognized
00001438                           164  END_OCR
00001438                           165              ; end of routine, reload registers
00001438  3CFC 198B                166              MOVE.W      #NEW_LINE,(A6)+         ; append to the end of every op
0000143C  4CDF 6FFF                167              MOVEM.L     (SP)+,A0-A3/A5-A6/D0-D7
00001440  4E75                     168              RTS                                 ; return to I/O
00001442                           169  
00001442                           170  ************************ ORI, ANDI, SUBI, EORI, CMPI **************************
00001442                           171  ORI_ANDI_SUBI_ADDI_EORI_CMPI
00001442  7002                     172              MOVEQ       #2,D0                   ; Iso-task 2: isolate d9-d11
00001444  6100 038E                173              BSR         ISO_BITS
00001448                           174                                                  **Branches**
00001448  B43C 0000                175              CMP.B       #0,D2
0000144C  6700 002E                176              BEQ         ORI_                    ; ORI
00001450  B43C 0001                177              CMP.B       #1,D2
00001454  6700 003A                178              BEQ         ANDI_                   ; ANDI
00001458  B43C 0002                179              CMP.B       #2,D2
0000145C  6700 0046                180              BEQ         SUBI_                   ; SUBI
00001460  B43C 0003                181              CMP.B       #3,D2
00001464  6700 0052                182              BEQ         ADDI_                   ; ADDI
00001468  B43C 0005                183              CMP.B       #5,D2
0000146C  6700 0060                184              BEQ         EORI_                   ; EORI
00001470  B43C 0006                185              CMP.B       #6,D2
00001474  6700 006E                186              BEQ         CMPI_                   ; CMPI
00001478  6000 0352                187              BRA         DATA                    ; value not recognized
0000147C                           188  
0000147C                           189  ************************************* ORI *************************************
0000147C                           190  ORI_
0000147C  3CFC 1909                191              MOVE.W      #_ORI,(A6)+     ; push address of ORI to buffer
00001480  7001                     192              MOVEQ       #1,D0           ; Iso-task 1: isolate bits d6-d7
00001482  6100 0350                193              BSR         ISO_BITS
00001486  6100 0408                194              BSR         BWL             ; append .B, .W, or .L
0000148A                           195      * Isolate bits d0-d5 and send them to EA routine before return
0000148A  6100 038A                196              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
0000148E  60A8                     197              BRA         END_OCR
00001490                           198  
00001490                           199  ************************************ ANDI *************************************
00001490                           200  ANDI_
00001490  3CFC 190D                201              MOVE.W      #_ANDI,(A6)+        ; push address of ANDI to buffer
00001494  7001                     202              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
00001496  6100 033C                203              BSR         ISO_BITS
0000149A  6100 03F4                204              BSR         BWL                 ; append .B, .W, or .L
0000149E                           205      * Isolate bits d0-d5 and send them to EA routine before return
0000149E  6100 0376                206              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000014A2  6094                     207              BRA         END_OCR
000014A4                           208  
000014A4                           209  ************************************ SUBI *************************************
000014A4                           210  SUBI_
000014A4  3CFC 1912                211              MOVE.W      #_SUBI,(A6)+        ; push address of SUBI to buffer
000014A8  7001                     212              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
000014AA  6100 0328                213              BSR         ISO_BITS
000014AE  6100 03E0                214              BSR         BWL                 ; append .B, .W, or .L
000014B2                           215      * Isolate bits d0-d5 and send them to EA routine before return
000014B2  6100 0362                216              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000014B6  6080                     217              BRA         END_OCR
000014B8                           218  
000014B8                           219  ************************************ ADDI *************************************
000014B8                           220  ADDI_
000014B8  3CFC 1917                221              MOVE.W      #_ADDI,(A6)+        ; push address of ADDI to buffer
000014BC  7001                     222              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
000014BE  6100 0314                223              BSR         ISO_BITS
000014C2  6100 03CC                224              BSR         BWL                 ; append .B, .W, or .L
000014C6                           225      * Isolate bits d0-d5 and send them to EA routine before return
000014C6  6100 034E                226              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000014CA  6000 FF6C                227              BRA         END_OCR
000014CE                           228  
000014CE                           229  ************************************ EORI *************************************
000014CE                           230  EORI_
000014CE  3CFC 191C                231              MOVE.W      #_EORI,(A6)+        ; push address of EORI to buffer
000014D2  7001                     232              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
000014D4  6100 02FE                233              BSR         ISO_BITS
000014D8  6100 03B6                234              BSR         BWL                 ; append .B, .W, or .L
000014DC                           235      * Isolate bits d0-d5 and send them to EA routine before return
000014DC  6100 0338                236              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000014E0  6000 FF56                237              BRA         END_OCR            
000014E4                           238  
000014E4                           239  ************************************ CMPI *************************************
000014E4                           240  CMPI_
000014E4  3CFC 1921                241              MOVE.W      #_CMPI,(A6)+        ; push address of CMPI to buffer
000014E8  7001                     242              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
000014EA  6100 02E8                243              BSR         ISO_BITS
000014EE  6100 03A0                244              BSR         BWL                 ; append .B, .W, or .L
000014F2                           245      * Isolate bits d0-d5 and send them to EA routine before return
000014F2  6100 0322                246              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000014F6  6000 FF40                247              BRA         END_OCR
000014FA                           248  
000014FA                           249  ******************************** MOVE, MOVEA **********************************
000014FA                           250  MOVE_MOVEA
000014FA  7001                     251              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
000014FC  6100 02D6                252              BSR         ISO_BITS
00001500  B43C 0001                253              CMP.B       #1,D2
00001504  6700 0006                254              BEQ         MOVEA_
00001508  6000 001C                255              BRA         MOVE_
0000150C                           256  
0000150C                           257  *********************************** MOVEA *************************************
0000150C                           258  MOVEA_
0000150C  3CFC 192B                259              MOVE.W      #_MOVEA,(A6)+        ; push address of MOVEA to buffer
00001510  7003                     260              MOVEQ       #3,D0               ; Iso-task 3: isolate d12-d15
00001512  6100 02C0                261              BSR         ISO_BITS
00001516  6100 03A4                262              BSR         BLW                 ; append .B, .W, or .L
0000151A                           263      * Isolate bits d0-d5 and d6-d11, and send them to EA routine before return
0000151A  6100 02FA                264              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
0000151E  6100 030C                265              BSR         ISO_D6_TO_D11_FOR_EA    ; send dest <ea> bits to EAR
00001522  6000 FF14                266              BRA         END_OCR
00001526                           267  
00001526                           268  ************************************ MOVE *************************************
00001526                           269  MOVE_
00001526  3CFC 1926                270              MOVE.W      #_MOVE,(A6)+        ; push address of MOVE to buffer
0000152A  7003                     271              MOVEQ       #3,D0               ; Iso-task 3: isolate d12-d15
0000152C  6100 02A6                272              BSR         ISO_BITS
00001530  6100 038A                273              BSR         BLW                 ; append .B, .W, or .L
00001534                           274      * Isolate bits d0-d5 and d6-d11, and send them to EA routine before return
00001534  6100 02E0                275              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
00001538  6100 02F2                276              BSR         ISO_D6_TO_D11_FOR_EA    ; send dest <ea> bits to EAR
0000153C  6000 FEFA                277              BRA         END_OCR
00001540                           278  
00001540                           279  ************************** NEG, NOP, RTS, JSR, JMP ****************************
00001540                           280  NEG_NOP_RTS_JSR_JMP
00001540  7002                     281              MOVEQ       #2,D0               ; Iso-task 2: isolate d9-d11
00001542  6100 0290                282              BSR         ISO_BITS
00001546                           283                                              **Branches**
00001546  B43C 0002                284              CMP.B       #2,D2
0000154A  6700 000E                285              BEQ         NEG_                ; NEG
0000154E  B43C 0007                286              CMP.B       #7,D2
00001552  6700 001C                287              BEQ         NOP_RTS_JSR_JMP     ; NOP, RTS, JSR, JMP
00001556  6000 0274                288              BRA         DATA                ; value not recognized
0000155A                           289  
0000155A                           290  ************************************* NEG *************************************
0000155A                           291  NEG_
0000155A  3CFC 1931                292              MOVE.W      #_NEG,(A6)+         ; push address of NEG to buffer
0000155E  7001                     293              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
00001560  6100 0272                294              BSR         ISO_BITS
00001564  6100 032A                295              BSR         BWL                 ; append .B, .W, or .L
00001568                           296      * Isolate bits d0-d5 and send them to EA routine before return
00001568  6100 02AC                297              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
0000156C  6000 FECA                298              BRA         END_OCR
00001570                           299  
00001570                           300  ***************************** NOP, RTS, JSR, JMP ******************************
00001570                           301  NOP_RTS_JSR_JMP
00001570  7001                     302              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
00001572  6100 0260                303              BSR         ISO_BITS
00001576                           304  
00001576  B43C 0001                305              CMP.B       #1,D2
0000157A  6700 0016                306              BEQ         NOP_RTS             ; NOP, RTS
0000157E  B43C 0002                307              CMP.B       #2,D2     
00001582  6700 0038                308              BEQ         JSR_                ; JSR
00001586  B43C 0003                309              CMP.B       #3,D2     
0000158A  6700 003C                310              BEQ         JMP_                ; JMP
0000158E  6000 023C                311              BRA         DATA                ; value not recognized
00001592                           312  
00001592                           313  ********************************** NOP, RTS ***********************************
00001592                           314  NOP_RTS
00001592  7000                     315              MOVEQ       #0,D0               ; Iso-task 0: isolate d0-d5
00001594  6100 023E                316              BSR         ISO_BITS
00001598  B43C 0031                317              CMP.B       #$31,D2
0000159C  6700 000E                318              BEQ         NOP_                ; NOP
000015A0  B43C 0035                319              CMP.B       #$35,D2     
000015A4  6700 000E                320              BEQ         RTS_                ; RTS
000015A8  6000 0222                321              BRA         DATA                ; value not recognized
000015AC                           322  
000015AC                           323  ************************************ NOP **************************************
000015AC                           324  NOP_
000015AC  3CFC 1935                325              MOVE.W      #_NOP,(A6)+         ; push address of NOP to buffer
000015B0  6000 FE86                326              BRA         END_OCR
000015B4                           327  
000015B4                           328  ************************************ RTS **************************************
000015B4                           329  RTS_
000015B4  3CFC 1939                330              MOVE.W      #_RTS,(A6)+         ; push address of RTS to buffer
000015B8  6000 FE7E                331              BRA         END_OCR
000015BC                           332  
000015BC                           333  ************************************ JSR **************************************
000015BC                           334  JSR_
000015BC  3CFC 193D                335              MOVE.W      #_JSR,(A6)+         ; push address of JSR to buffer
000015C0                           336      * Isolate bits d0-d5 and send them to EA routine before return
000015C0  6100 0254                337              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000015C4  6000 FE72                338              BRA         END_OCR
000015C8                           339  
000015C8                           340  ************************************ JMP **************************************
000015C8                           341  JMP_
000015C8  3CFC 1941                342              MOVE.W      #_JMP,(A6)+         ; push address of JMP to buffer
000015CC                           343      * Isolate bits d0-d5 and send them to EA routine before return
000015CC  6100 0248                344              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000015D0  6000 FE66                345              BRA         END_OCR
000015D4                           346  
000015D4                           347  ************************************ ADDQ *************************************
000015D4                           348  ADDQ_
000015D4  3CFC 1945                349              MOVE.W      #_ADDQ,(A6)+        ; push address of ADDQ to buffer
000015D8  7001                     350              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
000015DA  6100 01F8                351              BSR         ISO_BITS
000015DE  6100 02B0                352              BSR         BWL                 ; append .B, .W, or .L
000015E2                           353      * Isolate bits d0-d5 and send them to EA routine before return
000015E2  6100 0232                354              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000015E6  6000 FE50                355              BRA         END_OCR
000015EA                           356  
000015EA                           357  ************************************ Bcc **************************************
000015EA                           358  B_
000015EA  7005                     359              MOVEQ       #5,D0               ; Iso-task 1: isolate bits d6-d7
000015EC  6100 01E6                360              BSR         ISO_BITS
000015F0                           361                                              **BRANCH**
000015F0  B43C 0004                362              CMP.B       #4,D2
000015F4  6700 0026                363              BEQ         BCC_                ; BCC
000015F8  B43C 0005                364              CMP.B       #5,D2
000015FC  6700 0026                365              BEQ         BCS_                ; BCS
00001600  B43C 0007                366              CMP.B       #7,D2
00001604  6700 0026                367              BEQ         BEQ_                ; BEQ
00001608  B43C 0008                368              CMP.B       #8,D2
0000160C  6700 0026                369              BEQ         BVC_                ; BVC
00001610  B43C 0009                370              CMP.B       #9,D2
00001614  6700 0026                371              BEQ         BVS_                ; BVS
00001618  6000 01B2                372              BRA         DATA                ; value not recognized
0000161C                           373  
0000161C                           374  BCC_
0000161C  3CFC 194A                375              MOVE.W      #_BCC,(A6)+         ; push address of BCC to buffer
00001620                           376      * need to calculate displacement
00001620  6000 FE16                377              BRA         END_OCR
00001624                           378  BCS_
00001624  3CFC 194E                379              MOVE.W      #_BCS,(A6)+         ; push address of BCS to buffer
00001628                           380      * need to calculate displacement
00001628  6000 FE0E                381              BRA         END_OCR
0000162C                           382  BEQ_
0000162C  3CFC 1952                383              MOVE.W      #_BEQ,(A6)+         ; push address of BEQ to buffer
00001630                           384      * need to calculate displacement
00001630  6000 FE06                385              BRA         END_OCR
00001634                           386  BVC_
00001634  3CFC 1956                387              MOVE.W      #_BVC,(A6)+         ; push address of BVC to buffer
00001638                           388      * need to calculate displacement
00001638  6000 FDFE                389              BRA         END_OCR
0000163C                           390  BVS_
0000163C  3CFC 195A                391              MOVE.W      #_BVS,(A6)+         ; push address of BVS to buffer
00001640                           392      * need to calculate displacement
00001640  6000 FDF6                393              BRA         END_OCR
00001644                           394  ************************************* OR **************************************
00001644                           395  OR_
00001644  3CFC 195E                396              MOVE.W      #_OR,(A6)+          ; push address of OR to buffer
00001648  7001                     397              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
0000164A  6100 0188                398              BSR         ISO_BITS
0000164E  6100 0240                399              BSR         BWL                 ; append .B, .W, or .L
00001652                           400      * Isolate bits d0-d5 and d6-d11, and send them to EA routine before return
00001652  6100 01C2                401              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
00001656  6100 01D4                402              BSR         ISO_D6_TO_D11_FOR_EA    ; send dest <ea> bits to EAR
0000165A  6000 FDDC                403              BRA         END_OCR
0000165E                           404  ************************************ SUBA *************************************
0000165E                           405  SUBA_
0000165E  3CFC 1961                406              MOVE.W      #_SUBA,(A6)+    ; push address of SUBA to buffer
00001662  7004                     407              MOVEQ       #4,D0           ; Iso-task 4: isolate bits d8
00001664  6100 016E                408              BSR         ISO_BITS
00001668  6100 0240                409              BSR         WL              ; .W or .L, use WL when isolating d8
0000166C                           410      * Isolate bits d0-d5 and d6-d11, and send them to EA routine before return
0000166C  6100 01A8                411              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
00001670  6100 01BA                412              BSR         ISO_D6_TO_D11_FOR_EA    ; send dest <ea> bits to EAR
00001674  6000 FDC2                413              BRA         END_OCR
00001678                           414  ******************************* EOR, CMP, CMPA ********************************
00001678                           415  EOR_CMP_CMPA
00001678  7001                     416              MOVEQ       #1,D0           ; Iso-task 1: isolate bits d6-d7
0000167A  6100 0158                417              BSR         ISO_BITS
0000167E                           418  
0000167E  B43C 0003                419              CMP.B       #3,D2
00001682  6700 0006                420              BEQ         CMPA_           ; CMPA
00001686  6000 001C                421              BRA         EOR_CMP         ; EOR, CMP
0000168A                           422  
0000168A                           423  ************************************ CMPA *************************************
0000168A                           424  CMPA_
0000168A  3CFC 196E                425              MOVE.W      #_CMPA,(A6)+    ; push address of CMPA to buffer
0000168E  7004                     426              MOVEQ       #4,D0           ; Iso-task 4: isolate bits d8
00001690  6100 0142                427              BSR         ISO_BITS
00001694  6100 0214                428              BSR         WL              ; .W or .L, use WL when isolating d8
00001698                           429      * Isolate bits d0-d5 and d6-d11, and send them to EA routine before return
00001698  6100 017C                430              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
0000169C  6100 018E                431              BSR         ISO_D6_TO_D11_FOR_EA    ; send dest <ea> bits to EAR
000016A0  6000 FD96                432              BRA         END_OCR
000016A4                           433  ********************************** EOR, CMP ***********************************
000016A4                           434  EOR_CMP
000016A4  7004                     435              MOVEQ       #4,D0           ; Iso-task 4: isolate bits d8
000016A6  6100 012C                436              BSR         ISO_BITS
000016AA                           437  
000016AA  B43C 0000                438              CMP.B       #0,D2
000016AE  6700 0006                439              BEQ         CMP_            ; CMP
000016B2  6000 001C                440              BRA         EOR_            ; EOR
000016B6                           441  
000016B6                           442  ************************************ CMP **************************************
000016B6                           443  CMP_
000016B6  3CFC 196A                444              MOVE.W      #_CMP,(A6)+     ; push address of CMP to buffer
000016BA  7001                     445              MOVEQ       #1,D0           ; Iso-task 1: isolate bits d6-d7
000016BC  6100 0116                446              BSR         ISO_BITS
000016C0  6100 01CE                447              BSR         BWL             ; append .B, .W, or .L
000016C4                           448      * Isolate bits d0-d5 and d6-d11, and send them to EA routine before return
000016C4  6100 0150                449              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000016C8  6100 0162                450              BSR         ISO_D6_TO_D11_FOR_EA    ; send dest <ea> bits to EAR
000016CC  6000 FD6A                451              BRA         END_OCR
000016D0                           452  ************************************ EOR **************************************
000016D0                           453  EOR_
000016D0  3CFC 1966                454              MOVE.W      #_EOR,(A6)+     ; push address of EOR to buffer
000016D4  7001                     455              MOVEQ       #1,D0           ; Iso-task 1: isolate bits d6-d7
000016D6  6100 00FC                456              BSR         ISO_BITS
000016DA  6100 01B4                457              BSR         BWL             ; append .B, .W, or .L
000016DE                           458      * Isolate bits d0-d5 and d6-d11, and send them to EA routine before return
000016DE  6100 0136                459              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000016E2  6100 0148                460              BSR         ISO_D6_TO_D11_FOR_EA    ; send dest <ea> bits to EAR
000016E6  6000 FD50                461              BRA         END_OCR
000016EA                           462  *********************************** AND ***************************************
000016EA                           463  AND_
000016EA  3CFC 1973                464              MOVE.W      #_AND,(A6)+     ; push address of AND to buffer
000016EE  7001                     465              MOVEQ       #1,D0           ; Iso-task 1: isolate bits d6-d7
000016F0  6100 00E2                466              BSR         ISO_BITS
000016F4  6100 019A                467              BSR         BWL             ; append .B, .W, or .L
000016F8                           468      * Isolate bits d0-d5 and d6-d11, and send them to EA routine before return
000016F8  6100 011C                469              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000016FC  6100 012E                470              BSR         ISO_D6_TO_D11_FOR_EA    ; send dest <ea> bits to EAR
00001700  6000 FD36                471              BRA         END_OCR
00001704                           472  ************************************ ADDA *************************************
00001704                           473  ADDA_
00001704  3CFC 1977                474              MOVE.W      #_ADDA,(A6)+    ; push address of ADDA to buffer
00001708  7004                     475              MOVEQ       #4,D0           ; Iso-task 4: isolate bits d8
0000170A  6100 00C8                476              BSR         ISO_BITS
0000170E  6100 019A                477              BSR         WL              ; .W or .L, use WL when isolating d8
00001712                           478      * Isolate bits d0-d5 and d6-d11, and send them to EA routine before return
00001712  6100 0102                479              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
00001716  6100 0114                480              BSR         ISO_D6_TO_D11_FOR_EA    ; send dest <ea> bits to EAR
0000171A  6000 FD1C                481              BRA         END_OCR
0000171E                           482  ********************************** ASd, ROd ***********************************
0000171E                           483  ASd_ROd
0000171E  7001                     484              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
00001720  6100 00B2                485              BSR         ISO_BITS
00001724  B43C 0003                486              CMP.B       #3,D2
00001728  6700 0048                487              BEQ         ASd_ROd_MS
0000172C  6000 0002                488              BRA         ASd_ROd_RS
00001730                           489  
00001730                           490  ASd_ROd_RS
00001730  7006                     491              MOVEQ       #6,D0               ; Iso-task 6: isolate d3-d4
00001732  6100 00A0                492              BSR         ISO_BITS
00001736  B43C 0000                493              CMP.B       #0,D2
0000173A  6700 000E                494              BEQ         ASd_RS               ; ASd
0000173E  B43C 0003                495              CMP.B       #3,D2
00001742  6700 001A                496              BEQ         ROd_RS               ; ROd
00001746  6000 0084                497              BRA         DATA                ; value not recognized
0000174A                           498  
0000174A                           499  ASd_RS
0000174A  3CFC 197C                500              MOVE.W      #_ASd,(A6)+         ; push address of ASd to buffer
0000174E  6100 0064                501              BSR         DIRECTION
00001752  6100 006C                502              BSR         ASd_ROd_SIZE
00001756  6100 00BE                503              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
0000175A  6000 FCDC                504              BRA         END_OCR
0000175E                           505  ROd_RS
0000175E  3CFC 197F                506              MOVE.W      #_ROd,(A6)+         ; push address of ROd to buffer
00001762  6100 0050                507              BSR         DIRECTION
00001766  6100 0058                508              BSR         ASd_ROd_SIZE
0000176A  6100 00AA                509              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
0000176E  6000 FCC8                510              BRA         END_OCR
00001772                           511  *******************************************************************************
00001772                           512  ASd_ROd_MS
00001772  7002                     513              MOVEQ       #2,D0       ; isolate d9-d11
00001774  6100 005E                514              BSR         ISO_BITS
00001778  B43C 0000                515              CMP.B       #0,D2       ; 
0000177C  6700 000E                516              BEQ         ASd_MS
00001780  B43C 0003                517              CMP.B       #3,D2
00001784  6700 001A                518              BEQ         ROd_MS
00001788  6000 0042                519              BRA         DATA
0000178C                           520  
0000178C                           521  ASd_MS
0000178C  3CFC 197C                522              MOVE.W      #_ASd,(A6)+         ; push address of ASd to buffer
00001790  6100 0022                523              BSR         DIRECTION
00001794  3CFC 1903                524              MOVE.W      #_WORD,(A6)+
00001798  6100 007C                525              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
0000179C  6000 FC9A                526              BRA         END_OCR
000017A0                           527  ROd_MS
000017A0  3CFC 197F                528              MOVE.W      #_ROd,(A6)+         ; push address of ROd to buffer
000017A4  6100 000E                529              BSR         DIRECTION
000017A8  3CFC 1903                530              MOVE.W      #_WORD,(A6)+
000017AC  6100 0068                531              BSR         ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
000017B0  6000 FC86                532              BRA         END_OCR
000017B4                           533  *******************************************************************************
000017B4                           534  DIRECTION
000017B4  7004                     535              MOVEQ       #4,D0               ; isolate d8
000017B6  6100 001C                536              BSR         ISO_BITS
000017BA  6100 012C                537              BSR         LR                  ; add left or right
000017BE  4E75                     538              RTS
000017C0                           539  ASd_ROd_SIZE
000017C0  7001                     540              MOVEQ       #1,D0               ; Iso-task 1: isolate bits d6-d7
000017C2  6100 0010                541              BSR         ISO_BITS
000017C6  6100 00C8                542              BSR         BWL                 ; append .B, .W, or .L
000017CA  4E75                     543              RTS
000017CC                           544  
000017CC                           545  *******************************************************************************
000017CC                           546  DATA ; value not recognized
000017CC  3CFC 1986                547              MOVE.W      #_DATA,(A6)+         ; push address of DATA to buffer
000017D0  6000 FC66                548              BRA         END_OCR
000017D4                           549  
000017D4                           550  ************************** ISOLATE BITS SUBROUTINE ****************************
000017D4                           551  
000017D4                           552  ISO_BITS    ; Subroutine: Isolates bits based on the task # assigned to D0
000017D4  B03C 0000                553              CMP.B       #0,D0       ; Task 0, isolate d0-d5
000017D8  6700 00AE                554              BEQ         d0tod5
000017DC  B03C 0001                555              CMP.B       #1,D0       ; Task 1, isolate d6-d7
000017E0  6700 0092                556              BEQ         d6tod7
000017E4  B03C 0002                557              CMP.B       #2,D0       ; Task 2, isolate d9-d11
000017E8  6700 006C                558              BEQ         d9tod11
000017EC  B03C 0003                559              CMP.B       #3,D0       ; Task 3, isolate d12-d15
000017F0  6700 0050                560              BEQ         d12tod15
000017F4  B03C 0004                561              CMP.B       #4,D0       ; Task 4, isolate d8
000017F8  6700 0066                562              BEQ         d8
000017FC  B03C 0005                563              CMP.B       #5,D0       ; Task 5, isolate d8-d11
00001800  6700 004A                564              BEQ         d8tod11
00001804  B03C 0006                565              CMP.B       #6,D0       ; Task 6, isolate d3-d4
00001808  6700 0074                566              BEQ         d3tod4
0000180C  B03C 0007                567              CMP.B       #7,D0       ; Task 7, isolate d6-d11
00001810  6700 0058                568              BEQ         d6tod11
00001814  4E75                     569              RTS                     ; return to op-code branch
00001816                           570  
00001816                           571  ISO_D0_TO_D5_FOR_EA     ; send source <ea> bits to EAR
00001816  7000                     572              MOVEQ       #0,D0           ; Iso-task 0: isolate bits d0-d5
00001818  61BA                     573              BSR         ISO_BITS
0000181A  48E7 C000                574              MOVEM.L     D0/D1,-(SP)     ; save reg state before subroutine
0000181E  1002                     575              MOVE.B      D2,D0           ; load isolated bits to D0, used by EA
00001820  7200                     576              MOVE.L      #0,D1
00001822  6100 F81A                577              BSR         EAR_decode      ; call EA subroutine
00001826  4CDF 0003                578              MOVEM.L     (SP)+,D0/D1     ; restore reg state after subroutine
0000182A  4E75                     579              RTS                         ; return to op-code branch
0000182C                           580  
0000182C                           581  ISO_D6_TO_D11_FOR_EA    ; send dest <ea> bits to EAR
0000182C  7007                     582              MOVEQ       #7,D0           ; Iso-task 7: isolate bits d6-d11
0000182E  61A4                     583              BSR         ISO_BITS
00001830  48E7 C000                584              MOVEM.L     D0/D1,-(SP)     ; save reg state before subroutine
00001834  3002                     585              MOVE.W      D2,D0           ; load isolated bits to D0, used by EA
00001836  7201                     586              MOVE.L      #1,D1
00001838  6100 F804                587              BSR         EAR_decode      ; call EA subroutine
0000183C  4CDF 0003                588              MOVEM.L     (SP)+,D0/D1     ; restore reg state after subroutine
00001840  4E75                     589              RTS                         ; return to op-code branch
00001842                           590  
00001842                           591  d12tod15    ; Isolate bits d12-d15 and assign them to register D2
00001842  3401                     592              MOVE.W      D1,D2       ; avoid overwrite of original
00001844  E95A                     593              ROL.W       #4,D2       ; move d12-d15 -> d0-d3
00001846  0242 000F                594              ANDI.W      #$F,D2      ; mask to keep only four bits
0000184A  4E75                     595              RTS                     ; return to op-code branch
0000184C                           596  
0000184C                           597  d8tod11     ; Isolate bits d8-d11 and assign them to register D2
0000184C  3401                     598              MOVE.W      D1,D2       ; avoid overwrite of original
0000184E  E15A                     599              ROL.W       #8,D2       ; move d8-d11 -> d0-d2
00001850  0242 000F                600              ANDI.W      #$0F,D2     ; mask to keep only four bits
00001854  4E75                     601              RTS                     ; return to op-code branch
00001856                           602  
00001856                           603  
00001856                           604  d9tod11     ; Isolate bits d9-d11 and assign them to register D2
00001856  3401                     605              MOVE.W      D1,D2       ; avoid overwrite of original
00001858  EF5A                     606              ROL.W       #7,D2       ; move d9-d11 -> d0-d2
0000185A  0242 0007                607              ANDI.W      #7,D2       ; mask to keep only three bits
0000185E  4E75                     608              RTS                     ; return to op-code branch
00001860                           609  
00001860                           610  d8          ; Isolate bits d8 and assign them to register D2
00001860  3401                     611              MOVE.W      D1,D2       ; avoid overwrite of original
00001862  E05A                     612              ROR.W       #8,D2       ; move d8-d11 -> d0-d2
00001864  0242 0001                613              ANDI.W      #1,D2       ; mask to keep only one bit
00001868  4E75                     614              RTS                     ; return to op-code branch
0000186A                           615  d6tod11
0000186A  3401                     616              MOVE.W      D1,D2       ; avoid overwrite of original
0000186C  EC5A                     617              ROR.W       #6,D2       ; move d6-d11 -> d0-d5
0000186E  0242 003F                618              ANDI.W      #$3F,D2     ; mask to keep only three bits
00001872  4E75                     619              RTS                     ; return to op-code branch
00001874                           620  
00001874                           621  d6tod7      ; Isolate bits d6-d7 and assign them to register D2
00001874  3401                     622              MOVE.W      D1,D2       ; avoid overwrite of original
00001876  EC5A                     623              ROR.W       #6,D2       ; move d6-d7 -> d0-d1
00001878  0242 0003                624              ANDI.W      #3,D2       ; mask to keep only two bits
0000187C  4E75                     625              RTS                     ; return to op-code branch
0000187E                           626  
0000187E                           627  d3tod4      ; Isolate bits d0-d5 and assign them to register D2
0000187E  3401                     628              MOVE.W      D1,D2       ; avoid overwrite of original
00001880  E65A                     629              ROR.W       #3,D2       ; move d3-d4 -> d0-d1
00001882  0242 0003                630              ANDI.W      #3,D2       ; mask to keep only two bits
00001886  4E75                     631              RTS                     ; return to op-code branch
00001888                           632  
00001888                           633  d0tod5      ; Isolate bits d0-d5 and assign them to register D2
00001888  3401                     634              MOVE.W      D1,D2       ; avoid overwrite of original
0000188A  0242 003F                635              ANDI.W      #$3F,D2     ; mask to keep only the first six bits
0000188E  4E75                     636              RTS                     ; return to op-code branch
00001890                           637  
00001890                           638  *********************** BYTE, WORD, OR LONG SUBROUTINE ************************
00001890                           639  BWL                                     ; standard sizing
00001890  B43C 0000                640              CMP.B       #0,D2
00001894  6700 0040                641              BEQ         BYTE_
00001898  B43C 0001                642              CMP.B       #1,D2
0000189C  6700 003E                643              BEQ         WORD_
000018A0  B43C 0002                644              CMP.B       #2,D2
000018A4  6700 003C                645              BEQ         LONG_
000018A8  4E75                     646              RTS                         ; RTS assumes that it didn't branch
000018AA                           647  
000018AA                           648  WL                                      ; used exclusively with SUBA,CMPA,ADDA
000018AA  B43C 0000                649              CMP.B       #0,D2
000018AE  6700 002C                650              BEQ         WORD_
000018B2  B43C 0001                651              CMP.B       #1,D2
000018B6  6700 002A                652              BEQ         LONG_
000018BA  4E75                     653              RTS                         ; RTS assumes that it didn't branch
000018BC                           654  
000018BC                           655  BLW                                     ; used exclusively with MOVE and MOVEA
000018BC  B43C 0001                656              CMP.B       #1,D2
000018C0  6700 0014                657              BEQ         BYTE_
000018C4  B43C 0002                658              CMP.B       #2,D2
000018C8  6700 0018                659              BEQ         LONG_
000018CC  B43C 0003                660              CMP.B       #3,D2
000018D0  6700 000A                661              BEQ         WORD_
000018D4  4E75                     662              RTS                         ; RTS assumes that it didn't branch
000018D6                           663  
000018D6                           664  BYTE_
000018D6  3CFC 1900                665              MOVE.W      #_BYTE,(A6)+    ; push address of .B to buffer
000018DA  4E75                     666              RTS                         ; return to subroutine that called BWL
000018DC                           667  
000018DC                           668  WORD_
000018DC  3CFC 1903                669              MOVE.W      #_WORD,(A6)+    ; push address of .W to buffer
000018E0  4E75                     670              RTS                         ; return to subroutine that called BWL
000018E2                           671  
000018E2                           672  LONG_
000018E2  3CFC 1906                673              MOVE.W      #_LONG,(A6)+    ; push address of .L to buffer
000018E6  4E75                     674              RTS                         ; return to subroutine that called BWL
000018E8                           675  
000018E8                           676  *************************** LEFT RIGHT SUBROUTINE *****************************
000018E8                           677  LR
000018E8  B43C 0000                678              CMP.B       #0,D2           ; can only be 0 or 1
000018EC  6700 0006                679              BEQ         RIGHT
000018F0  6000 0008                680              BRA         LEFT
000018F4                           681  
000018F4                           682  RIGHT
000018F4  3CFC 1984                683              MOVE.W      #_RIGHT,(A6)+   ; push address of 'R' to buffer
000018F8  4E75                     684              RTS
000018FA                           685  
000018FA                           686  LEFT
000018FA  3CFC 1982                687              MOVE.W      #_LEFT,(A6)+    ; push address of 'L' to buffer
000018FE  4E75                     688              RTS
00001900                           689  
00001900                           690  ********************************* CONSTANTS ***********************************
00001900= 2E 42 00                 691  _BYTE       DC.B        '.B',0
00001903= 2E 57 00                 692  _WORD       DC.B        '.W',0
00001906= 2E 4C 00                 693  _LONG       DC.B        '.L',0
00001909= 4F 52 49 00              694  _ORI        DC.B        'ORI',0
0000190D= 41 4E 44 49 00           695  _ANDI       DC.B        'ANDI',0
00001912= 53 55 42 49 00           696  _SUBI       DC.B        'SUBI',0
00001917= 41 44 44 49 00           697  _ADDI       DC.B        'ADDI',0
0000191C= 45 4F 52 49 00           698  _EORI       DC.B        'EORI',0
00001921= 43 4D 50 49 00           699  _CMPI       DC.B        'CMPI',0
00001926= 4D 4F 56 45 00           700  _MOVE       DC.B        'MOVE',0
0000192B= 4D 4F 56 45 41 00        701  _MOVEA      DC.B        'MOVEA',0
00001931= 4E 45 47 00              702  _NEG        DC.B        'NEG',0
00001935= 4E 4F 50 00              703  _NOP        DC.B        'NOP',0
00001939= 52 54 53 00              704  _RTS        DC.B        'RTS',0
0000193D= 4A 53 52 00              705  _JSR        DC.B        'JSR',0
00001941= 4A 4D 50 00              706  _JMP        DC.B        'JMP',0
00001945= 41 44 44 51 00           707  _ADDQ       DC.B        'ADDQ',0
0000194A= 42 43 43 00              708  _BCC        DC.B        'BCC',0
0000194E= 42 43 53 00              709  _BCS        DC.B        'BCS',0
00001952= 42 45 51 00              710  _BEQ        DC.B        'BEQ',0
00001956= 42 56 43 00              711  _BVC        DC.B        'BVC',0
0000195A= 42 56 53 00              712  _BVS        DC.B        'BVS',0
0000195E= 4F 52 00                 713  _OR         DC.B        'OR',0
00001961= 53 55 42 41 00           714  _SUBA       DC.B        'SUBA',0
00001966= 45 4F 52 00              715  _EOR        DC.B        'EOR',0
0000196A= 43 4D 50 00              716  _CMP        DC.B        'CMP',0
0000196E= 43 4D 50 41 00           717  _CMPA       DC.B        'CMPA',0
00001973= 41 4E 44 00              718  _AND        DC.B        'AND',0
00001977= 41 44 44 41 00           719  _ADDA       DC.B        'ADDA',0
0000197C= 41 53 00                 720  _ASd        DC.B        'AS',0
0000197F= 52 4F 00                 721  _ROd        DC.B        'RO',0
00001982= 4C 00                    722  _LEFT       DC.B        'L',0
00001984= 52 00                    723  _RIGHT      DC.B        'R',0
00001986= 44 41 54 41 00           724  _DATA       DC.B        'DATA',0
0000198B= 0D 0A 00                 725  NEW_LINE    DC.B        CR,LF,0
0000198E                           726  
0000198E                           727  *********************************** OTHER *************************************
0000198E  =0000000D                728  CR          EQU         $0D
0000198E  =0000000A                729  LF          EQU         $0A
0000198E                           730  
0000198E                           731  *******************************************************************************
0000198E                           732  *                            End Op-code Routine
0000198E                           733  *******************************************************************************
0000198E                           734              END           START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_               1704
ADDI_               14B8
ADDQ_               15D4
ANDI_               1490
AND_                16EA
ASD_MS              178C
ASD_ROD             171E
ASD_ROD_MS          1772
ASD_ROD_RS          1730
ASD_ROD_SIZE        17C0
ASD_RS              174A
BCC_                161C
BCS_                1624
BEQ_                162C
BLW                 18BC
BVC_                1634
BVS_                163C
BWL                 1890
BYTE_               18D6
B_                  15EA
CMPA_               168A
CMPI_               14E4
CMP_                16B6
CR                  D
D0TOD5              1888
D12TOD15            1842
D3TOD4              187E
D6TOD11             186A
D6TOD7              1874
D8                  1860
D8TOD11             184C
D9TOD11             1856
DATA                17CC
DEST                105E
DIRECTION           17B4
DISPLAY             101C
EAR_DECODE          103E
EAR_DONE            1052
END_INPUT           13CC
END_OCR             1438
EORI_               14CE
EOR_                16D0
EOR_CMP             16A4
EOR_CMP_CMPA        1678
INPUT               1080
ISO_BITS            17D4
ISO_D0_TO_D5_FOR_EA  1816
ISO_D6_TO_D11_FOR_EA  182C
JMP_                15C8
JSR_                15BC
LEFT                18FA
LF                  A
LONG_               18E2
LOOP                1022
LR                  18E8
MOVEA_              150C
MOVE_               1526
MOVE_MOVEA          14FA
NEG_                155A
NEG_NOP_RTS_JSR_JMP  1540
NEW_LINE            198B
NEXT                100C
NOP_                15AC
NOP_RTS             1592
NOP_RTS_JSR_JMP     1570
OCR                 13CC
ORI_                147C
ORI_ANDI_SUBI_ADDI_EORI_CMPI  1442
OR_                 1644
QUIT                103C
RIGHT               18F4
ROD_MS              17A0
ROD_RS              175E
RTS_                15B4
SRCE                1058
START               1000
SUBA_               165E
SUBI_               14A4
TO_CONSOLE          1036
VALIDB              1074
WL                  18AA
WORD_               18DC
_ADDA               1977
_ADDI               1917
_ADDQ               1945
_AND                1973
_ANDI               190D
_ASD                197C
_BCC                194A
_BCS                194E
_BEQ                1952
_BVC                1956
_BVS                195A
_BYTE               1900
_CMP                196A
_CMPA               196E
_CMPI               1921
_DATA               1986
_DEST               106C
_EOR                1966
_EORI               191C
_JMP                1941
_JSR                193D
_LEFT               1982
_LONG               1906
_MOVE               1926
_MOVEA              192B
_NEG                1931
_NOP                1935
_OR                 195E
_ORI                1909
_RIGHT              1984
_ROD                197F
_RTS                1939
_SRCE               1064
_SUBA               1961
_SUBI               1912
_WORD               1903
